package sudoku;

public class Puzzle {
	int grid[][];

	Puzzle() {

	/* TEST CASE 1*/	
		
		
		 grid = new int[][] { { -1, -1, 4, -1, 3, -1, -1, 6, -1 }, { -1, -1,
		  2, 1, 7, 9, 8, -1, 4 }, { -1, 8, -1, 6, -1, -1, -1, -1, 2 }, { -1,
		  -1, -1, -1, -1, -1, -1, 1, -1 }, { 4, -1, -1, -1, 9, -1, -1, -1, 5 },
		  { -1, 6, -1, -1, -1, -1, 2, -1, -1 }, { 2, -1, -1, -1, -1, 6, -1, 7,
		  -1 }, { 8, -1, 1, 7, 2, 3, 9, -1, -1 }, { -1, 9, -1, -1, 8, -1, 3,
		  -1, -1 } };
		 

/*
		TEST CASE 2 
			
		grid = new int[][] { {1,6,4,-1,-1,-1,-1,-1,2  },
				 {2,-1,-1,4,-1,3,9,1,-1  },
				 {-1,-1,5,-1,8,-1,4,-1,7  },
				 { -1,9,-1,-1,-1,6,5,-1,-1 }, 
				 { 5,-1,-1,1,-1,2,-1,-1,8 },
				 { -1,-1,8,9,-1,-1,-1,3,-1 }, 
				 { 8,-1,9,-1,4,-1,2,-1,-1 },
				 {-1,7,3,5,-1,9,-1,-1,1	},
				 { 4,-1,-1,-1,-1,-1,6,7,9 }	};
				 */
/*				 
		 TEST CASE 3 
		
		
		
				 grid = new int[][] { { 5, 3, -1,   -1, 7, -1,   -1, -1, -1 },
					{ 6, -1, -1,   1, 9, 5,   -1, -1, -1 },
					{ -1, 9, 8,   3, -1, -1,   -1, 6, -1 },

					{ 8, -1, -1,   -1, 6, -1,   -1, -1, 3 },
					{ 4, -1, -1,   8, -1, 3,   -1, -1, 1},
					{ 7, -1, -1,   -1, 2, -1,   -1, -1, 6 },

					{ -1, 6, -1,   -1, -1, -1,   2, 8, -1 },
					{ -1, -1, -1,   4, 1, 9,   -1, 3, 5 },
					{ 3, -1, -1,   -1, 8, -1,   -1, 7, 9 } };*/
			
		/* TEST CASE 4 */
		
	/*		grid = new int[][] { 
					{ 7,-1,3,-1,9,-1,-1,-1,-1 },
					{ 6,8,-1,-1,1,5,-1,-1,-1 },
					{ 1,-1,-1,2,-1,-1,-1,7,-1  },
					{ 8,3,-1,-1,-1,-1,-1,-1,-1  },
					{ -1,7,4,-1,-1,-1,5,1,-1  },
					{ -1,-1,-1,-1,-1,-1,-1,4,7 },
					{ -1,1,-1,-1,-1,2,-1,-1,6  },
					{ -1,-1,-1,9, 4,-1, -1, 8,5   },
					{ -1,-1,-1,-1,6,-1,1,-1,3  } };*/



	}

	public int[] freq(Puzzle p) {
		int freq[] = new int[] {0,0,0,0,0,0,0,0,0,0};
		
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				int value = p.grid[i][j];
				switch (value) {
				case 0:
					freq[0]++;
					break;
				case 1:
					freq[1]++;
					break;
				case 2:
					freq[2]++;
					break;
				case 3:
					freq[3]++;
					break;
				case 4:
					freq[4]++;
					break;
				case 5:
					freq[5]++;
					break;
				case 6:
					freq[6]++;
					break;
				case 7:
					freq[7]++;
					break;
				case 8:
					freq[8]++;
					break;
				case 9:
					freq[9]++;
					break;
				}

			}

		}
		
		//display1(freq);
		return freq;
	}

	public void display(Puzzle p) {
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				System.out.print(p.grid[i][j]);
				System.out.print("\t");
			}
			System.out.print("\n");
		}
	}
	
	public void display1(int a[]){
		for (int i = 0; i < 10; i++) {
			System.out.println(a[i]);
			
		}
	}
}
